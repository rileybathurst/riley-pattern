{"version":3,"file":"connect-mixin.js","sourceRoot":"","sources":["src/connect-mixin.ts"],"names":[],"mappings":"AAAA;;;;;;;;EAQE;AAqBF,MAAM,CAAC,MAAM,OAAO,GAClB,CAAI,KAAe,EAAE,EAAE,CACvB,CAAqC,WAAc,EAAE,EAAE,CACvD,KAAM,SAAQ,WAAW;IAGvB,iBAAiB;QACf,oCAAoC;QACpC,IAAI,CAAC,kBAAkB,GAAG,KAAK,CAAC,SAAS,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;QACtF,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC;QACrC,IAAI,KAAK,CAAC,iBAAiB,EAAE;YAC3B,KAAK,CAAC,iBAAiB,EAAE,CAAC;SAC3B;IACH,CAAC;IAED,oBAAoB;QAClB,IAAI,CAAC,kBAAkB,EAAE,CAAC;QAE1B,IAAI,KAAK,CAAC,oBAAoB,EAAE;YAC9B,KAAK,CAAC,oBAAoB,EAAE,CAAC;SAC9B;IACH,CAAC;IAED,+DAA+D;IAC/D,aAAa,CAAC,MAAS;QACrB,MAAM,IAAI,KAAK,CAAC,iCAAiC,CAAC,CAAC;IACrD,CAAC;CACF,CAAC","sourcesContent":["/**\n@license\nCopyright (c) 2018 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n/*\n  Mixin for connecting an element to the Redux store; implements the\n  basic store-connection boilerplate.\n\n  Sample use:\n  import { connect } from '../node_modules/pwa-helpers/connect-mixin.js';\n\n  class MyElement extends connect(store)(HTMLElement) {\n    // ...\n\n    _stateChanged(state) {\n      this.count = state.data.count;\n    }\n  }\n*/\nimport { Store, Unsubscribe } from 'redux';\n\ntype Constructor<T> = new(...args: any[]) => T;\n\nexport const connect =\n  <S>(store: Store<S>) =>\n  <T extends Constructor<HTMLElement>>(baseElement: T) =>\n  class extends baseElement {\n    __storeUnsubscribe!: Unsubscribe;\n\n    connectedCallback() {\n      // Connect the element to the store.\n      this.__storeUnsubscribe = store.subscribe(() => this._stateChanged(store.getState()));\n      this._stateChanged(store.getState());\n      if (super.connectedCallback) {\n        super.connectedCallback();\n      }\n    }\n\n    disconnectedCallback() {\n      this.__storeUnsubscribe();\n\n      if (super.disconnectedCallback) {\n        super.disconnectedCallback();\n      }\n    }\n\n    // This is called every time something is updated in the store.\n    _stateChanged(_state: S) {\n      throw new Error('_stateChanged() not implemented');\n    }\n  };\n"]}