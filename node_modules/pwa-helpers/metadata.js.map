{"version":3,"file":"metadata.js","sourceRoot":"","sources":["src/metadata.ts"],"names":[],"mappings":"AAAA;;;;;;;;EAQE;AAEF;;;;;;;;;;;;;;;;;;;EAmBE;AACF,MAAM,CAAC,MAAM,cAAc,GAAG,CAAC,EAAC,KAAK,EAAE,WAAW,EAAE,GAAG,EAAE,KAAK,EAAuE,EAAE,EAAE;IACvI,IAAI,KAAK,EAAE;QACT,QAAQ,CAAC,KAAK,GAAG,KAAK,CAAC;QACvB,QAAQ,CAAC,UAAU,EAAE,UAAU,EAAE,QAAQ,CAAC,KAAK,CAAC,CAAC;QACjD,QAAQ,CAAC,UAAU,EAAE,eAAe,EAAE,QAAQ,CAAC,KAAK,CAAC,CAAC;KACvD;IAED,IAAI,WAAW,EAAE;QACf,QAAQ,CAAC,MAAM,EAAE,aAAa,EAAE,WAAW,CAAC,CAAC;QAC7C,QAAQ,CAAC,UAAU,EAAE,gBAAgB,EAAE,WAAW,CAAC,CAAC;QACpD,QAAQ,CAAC,UAAU,EAAE,qBAAqB,EAAE,WAAW,CAAC,CAAC;KAC1D;IAED,IAAI,KAAK,EAAE;QACT,QAAQ,CAAC,UAAU,EAAE,UAAU,EAAE,KAAK,CAAC,CAAC;QACxC,QAAQ,CAAC,UAAU,EAAE,mBAAmB,EAAE,KAAK,CAAC,CAAC;KAClD;IAED,GAAG,GAAG,GAAG,IAAI,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC;IACpC,QAAQ,CAAC,UAAU,EAAE,QAAQ,EAAE,GAAG,CAAC,CAAC;IACpC,QAAQ,CAAC,UAAU,EAAE,aAAa,EAAE,GAAG,CAAC,CAAC;AAC3C,CAAC,CAAA;AAED,SAAS,QAAQ,CAAC,QAAe,EAAE,SAAgB,EAAE,OAAc;IACjE,IAAI,OAAO,GAAG,QAAQ,CAAC,IAAI,CAAC,aAAa,CAAC,QAAQ,QAAQ,KAAK,SAAS,IAAI,CAAC,CAAC;IAC9E,IAAI,CAAC,OAAO,EAAE;QACZ,OAAO,GAAG,QAAQ,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;QACzC,OAAO,CAAC,YAAY,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC;QAC1C,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;KACpC;IACD,OAAO,CAAC,YAAY,CAAC,SAAS,EAAE,OAAO,IAAI,EAAE,CAAC,CAAC;AACjD,CAAC","sourcesContent":["/**\n@license\nCopyright (c) 2018 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n/*\n  Utility method that updates the page's open graph and Twitter card metadata.\n  It takes an object as a parameter with the following properties:\n  title | description | url | image.\n\n  If the `url` is not specified, `document.location.href` will be used; for\n  all other properties, if they aren't specified, then that metadata field will not\n  be set.\n\n  Sample use:\n  import { updateMetadata } from '../node_modules/pwa-helpers/metadata.js';\n\n  updateMetadata({\n      title: 'My App - view 1',\n      description: 'This is my sample app',\n      url: document.location.href,\n      image: '/assets/view1-hero.png'\n  });\n\n*/\nexport const updateMetadata = ({title, description, url, image}: {title?: string, description?: string, url?: string, image?: string}) => {\n  if (title) {\n    document.title = title;\n    _setMeta('property', 'og:title', document.title);\n    _setMeta('property', 'twitter:title', document.title);\n  }\n\n  if (description) {\n    _setMeta('name', 'description', description);\n    _setMeta('property', 'og:description', description);\n    _setMeta('property', 'twitter:description', description);\n  }\n\n  if (image) {\n    _setMeta('property', 'og:image', image);\n    _setMeta('property', 'twitter:image:src', image);\n  }\n\n  url = url || document.location.href;\n  _setMeta('property', 'og:url', url);\n  _setMeta('property', 'twitter:url', url);\n}\n\nfunction _setMeta(attrName:string, attrValue:string, content:string) {\n  let element = document.head.querySelector(`meta[${attrName}=\"${attrValue}\"]`);\n  if (!element) {\n    element = document.createElement('meta');\n    element.setAttribute(attrName, attrValue);\n    document.head.appendChild(element);\n  }\n  element.setAttribute('content', content || '');\n}\n"]}