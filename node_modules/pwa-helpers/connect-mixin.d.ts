/**
@license
Copyright (c) 2018 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/
import { Store, Unsubscribe } from 'redux';
declare type Constructor<T> = new (...args: any[]) => T;
export declare const connect: <S>(store: Store<S, import("redux").AnyAction>) => <T extends Constructor<HTMLElement>>(baseElement: T) => {
    new (...args: any[]): {
        __storeUnsubscribe: Unsubscribe;
        connectedCallback(): void;
        disconnectedCallback(): void;
        _stateChanged(_state: S): void;
        accessKey: string;
        contentEditable: string;
        readonly dataset: DOMStringMap;
        dir: string;
        draggable: boolean;
        hidden: boolean;
        hideFocus: boolean;
        innerText: string;
        readonly isContentEditable: boolean;
        lang: string;
        readonly offsetHeight: number;
        readonly offsetLeft: number;
        readonly offsetParent: Element;
        readonly offsetTop: number;
        readonly offsetWidth: number;
        onabort: ((this: HTMLElement, ev: UIEvent) => any) | null;
        onactivate: ((this: HTMLElement, ev: Event) => any) | null;
        onbeforeactivate: ((this: HTMLElement, ev: Event) => any) | null;
        onbeforecopy: ((this: HTMLElement, ev: Event) => any) | null;
        onbeforecut: ((this: HTMLElement, ev: Event) => any) | null;
        onbeforedeactivate: ((this: HTMLElement, ev: Event) => any) | null;
        onbeforepaste: ((this: HTMLElement, ev: Event) => any) | null;
        onblur: ((this: HTMLElement, ev: FocusEvent) => any) | null;
        oncanplay: ((this: HTMLElement, ev: Event) => any) | null;
        oncanplaythrough: ((this: HTMLElement, ev: Event) => any) | null;
        onchange: ((this: HTMLElement, ev: Event) => any) | null;
        onclick: ((this: HTMLElement, ev: MouseEvent) => any) | null;
        oncontextmenu: ((this: HTMLElement, ev: PointerEvent) => any) | null;
        oncopy: ((this: HTMLElement, ev: ClipboardEvent) => any) | null;
        oncuechange: ((this: HTMLElement, ev: Event) => any) | null;
        oncut: ((this: HTMLElement, ev: ClipboardEvent) => any) | null;
        ondblclick: ((this: HTMLElement, ev: MouseEvent) => any) | null;
        ondeactivate: ((this: HTMLElement, ev: Event) => any) | null;
        ondrag: ((this: HTMLElement, ev: DragEvent) => any) | null;
        ondragend: ((this: HTMLElement, ev: DragEvent) => any) | null;
        ondragenter: ((this: HTMLElement, ev: DragEvent) => any) | null;
        ondragleave: ((this: HTMLElement, ev: DragEvent) => any) | null;
        ondragover: ((this: HTMLElement, ev: DragEvent) => any) | null;
        ondragstart: ((this: HTMLElement, ev: DragEvent) => any) | null;
        ondrop: ((this: HTMLElement, ev: DragEvent) => any) | null;
        ondurationchange: ((this: HTMLElement, ev: Event) => any) | null;
        onemptied: ((this: HTMLElement, ev: Event) => any) | null;
        onended: ((this: HTMLElement, ev: Event) => any) | null;
        onerror: ((this: HTMLElement, ev: ErrorEvent) => any) | null;
        onfocus: ((this: HTMLElement, ev: FocusEvent) => any) | null;
        oninput: ((this: HTMLElement, ev: Event) => any) | null;
        oninvalid: ((this: HTMLElement, ev: Event) => any) | null;
        onkeydown: ((this: HTMLElement, ev: KeyboardEvent) => any) | null;
        onkeypress: ((this: HTMLElement, ev: KeyboardEvent) => any) | null;
        onkeyup: ((this: HTMLElement, ev: KeyboardEvent) => any) | null;
        onload: ((this: HTMLElement, ev: Event) => any) | null;
        onloadeddata: ((this: HTMLElement, ev: Event) => any) | null;
        onloadedmetadata: ((this: HTMLElement, ev: Event) => any) | null;
        onloadstart: ((this: HTMLElement, ev: Event) => any) | null;
        onmousedown: ((this: HTMLElement, ev: MouseEvent) => any) | null;
        onmouseenter: ((this: HTMLElement, ev: MouseEvent) => any) | null;
        onmouseleave: ((this: HTMLElement, ev: MouseEvent) => any) | null;
        onmousemove: ((this: HTMLElement, ev: MouseEvent) => any) | null;
        onmouseout: ((this: HTMLElement, ev: MouseEvent) => any) | null;
        onmouseover: ((this: HTMLElement, ev: MouseEvent) => any) | null;
        onmouseup: ((this: HTMLElement, ev: MouseEvent) => any) | null;
        onmousewheel: ((this: HTMLElement, ev: WheelEvent) => any) | null;
        onmscontentzoom: ((this: HTMLElement, ev: Event) => any) | null;
        onmsmanipulationstatechanged: ((this: HTMLElement, ev: Event) => any) | null;
        onpaste: ((this: HTMLElement, ev: ClipboardEvent) => any) | null;
        onpause: ((this: HTMLElement, ev: Event) => any) | null;
        onplay: ((this: HTMLElement, ev: Event) => any) | null;
        onplaying: ((this: HTMLElement, ev: Event) => any) | null;
        onprogress: ((this: HTMLElement, ev: ProgressEvent) => any) | null;
        onratechange: ((this: HTMLElement, ev: Event) => any) | null;
        onreset: ((this: HTMLElement, ev: Event) => any) | null;
        onscroll: ((this: HTMLElement, ev: UIEvent) => any) | null;
        onseeked: ((this: HTMLElement, ev: Event) => any) | null;
        onseeking: ((this: HTMLElement, ev: Event) => any) | null;
        onselect: ((this: HTMLElement, ev: UIEvent) => any) | null;
        onselectstart: ((this: HTMLElement, ev: Event) => any) | null;
        onstalled: ((this: HTMLElement, ev: Event) => any) | null;
        onsubmit: ((this: HTMLElement, ev: Event) => any) | null;
        onsuspend: ((this: HTMLElement, ev: Event) => any) | null;
        ontimeupdate: ((this: HTMLElement, ev: Event) => any) | null;
        onvolumechange: ((this: HTMLElement, ev: Event) => any) | null;
        onwaiting: ((this: HTMLElement, ev: Event) => any) | null;
        outerText: string;
        spellcheck: boolean;
        tabIndex: number;
        title: string;
        blur(): void;
        click(): void;
        dragDrop(): boolean;
        focus(): void;
        msGetInputContext(): MSInputMethodContext;
        addEventListener<K extends "waiting" | "error" | "abort" | "progress" | "ended" | "change" | "input" | "select" | "activate" | "beforeactivate" | "beforedeactivate" | "blur" | "canplay" | "canplaythrough" | "click" | "contextmenu" | "dblclick" | "deactivate" | "drag" | "dragend" | "dragenter" | "dragleave" | "dragover" | "dragstart" | "drop" | "durationchange" | "emptied" | "focus" | "invalid" | "keydown" | "keypress" | "keyup" | "load" | "loadeddata" | "loadedmetadata" | "loadstart" | "mousedown" | "mousemove" | "mouseout" | "mouseover" | "mouseup" | "mousewheel" | "MSContentZoom" | "MSGestureChange" | "MSGestureDoubleTap" | "MSGestureEnd" | "MSGestureHold" | "MSGestureStart" | "MSGestureTap" | "MSInertiaStart" | "MSManipulationStateChanged" | "MSPointerCancel" | "MSPointerDown" | "MSPointerEnter" | "MSPointerLeave" | "MSPointerMove" | "MSPointerOut" | "MSPointerOver" | "MSPointerUp" | "pause" | "play" | "playing" | "ratechange" | "reset" | "scroll" | "seeked" | "seeking" | "selectstart" | "stalled" | "submit" | "suspend" | "timeupdate" | "touchcancel" | "touchend" | "touchmove" | "touchstart" | "volumechange" | "webkitfullscreenchange" | "webkitfullscreenerror" | "animationcancel" | "animationend" | "animationiteration" | "animationstart" | "gotpointercapture" | "lostpointercapture" | "pointercancel" | "pointerdown" | "pointerenter" | "pointerleave" | "pointermove" | "pointerout" | "pointerover" | "pointerup" | "transitioncancel" | "transitionend" | "transitionrun" | "transitionstart" | "wheel" | "ariarequest" | "command" | "MSGotPointerCapture" | "MSLostPointerCapture" | "beforecopy" | "beforecut" | "beforepaste" | "copy" | "cuechange" | "cut" | "mouseenter" | "mouseleave" | "paste">(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions | undefined): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions | undefined): void;
        removeEventListener<K extends "waiting" | "error" | "abort" | "progress" | "ended" | "change" | "input" | "select" | "activate" | "beforeactivate" | "beforedeactivate" | "blur" | "canplay" | "canplaythrough" | "click" | "contextmenu" | "dblclick" | "deactivate" | "drag" | "dragend" | "dragenter" | "dragleave" | "dragover" | "dragstart" | "drop" | "durationchange" | "emptied" | "focus" | "invalid" | "keydown" | "keypress" | "keyup" | "load" | "loadeddata" | "loadedmetadata" | "loadstart" | "mousedown" | "mousemove" | "mouseout" | "mouseover" | "mouseup" | "mousewheel" | "MSContentZoom" | "MSGestureChange" | "MSGestureDoubleTap" | "MSGestureEnd" | "MSGestureHold" | "MSGestureStart" | "MSGestureTap" | "MSInertiaStart" | "MSManipulationStateChanged" | "MSPointerCancel" | "MSPointerDown" | "MSPointerEnter" | "MSPointerLeave" | "MSPointerMove" | "MSPointerOut" | "MSPointerOver" | "MSPointerUp" | "pause" | "play" | "playing" | "ratechange" | "reset" | "scroll" | "seeked" | "seeking" | "selectstart" | "stalled" | "submit" | "suspend" | "timeupdate" | "touchcancel" | "touchend" | "touchmove" | "touchstart" | "volumechange" | "webkitfullscreenchange" | "webkitfullscreenerror" | "animationcancel" | "animationend" | "animationiteration" | "animationstart" | "gotpointercapture" | "lostpointercapture" | "pointercancel" | "pointerdown" | "pointerenter" | "pointerleave" | "pointermove" | "pointerout" | "pointerover" | "pointerup" | "transitioncancel" | "transitionend" | "transitionrun" | "transitionstart" | "wheel" | "ariarequest" | "command" | "MSGotPointerCapture" | "MSLostPointerCapture" | "beforecopy" | "beforecut" | "beforepaste" | "copy" | "cuechange" | "cut" | "mouseenter" | "mouseleave" | "paste">(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions | undefined): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions | undefined): void;
        readonly assignedSlot: HTMLSlotElement | null;
        readonly attributes: NamedNodeMap;
        readonly classList: DOMTokenList;
        className: string;
        readonly clientHeight: number;
        readonly clientLeft: number;
        readonly clientTop: number;
        readonly clientWidth: number;
        id: string;
        innerHTML: string;
        msContentZoomFactor: number;
        readonly msRegionOverflow: string;
        onariarequest: ((this: Element, ev: Event) => any) | null;
        oncommand: ((this: Element, ev: Event) => any) | null;
        onmsgesturechange: ((this: Element, ev: Event) => any) | null;
        onmsgesturedoubletap: ((this: Element, ev: Event) => any) | null;
        onmsgestureend: ((this: Element, ev: Event) => any) | null;
        onmsgesturehold: ((this: Element, ev: Event) => any) | null;
        onmsgesturestart: ((this: Element, ev: Event) => any) | null;
        onmsgesturetap: ((this: Element, ev: Event) => any) | null;
        onmsgotpointercapture: ((this: Element, ev: Event) => any) | null;
        onmsinertiastart: ((this: Element, ev: Event) => any) | null;
        onmslostpointercapture: ((this: Element, ev: Event) => any) | null;
        onmspointercancel: ((this: Element, ev: Event) => any) | null;
        onmspointerdown: ((this: Element, ev: Event) => any) | null;
        onmspointerenter: ((this: Element, ev: Event) => any) | null;
        onmspointerleave: ((this: Element, ev: Event) => any) | null;
        onmspointermove: ((this: Element, ev: Event) => any) | null;
        onmspointerout: ((this: Element, ev: Event) => any) | null;
        onmspointerover: ((this: Element, ev: Event) => any) | null;
        onmspointerup: ((this: Element, ev: Event) => any) | null;
        onwebkitfullscreenchange: ((this: Element, ev: Event) => any) | null;
        onwebkitfullscreenerror: ((this: Element, ev: Event) => any) | null;
        outerHTML: string;
        readonly prefix: string | null;
        readonly scrollHeight: number;
        scrollLeft: number;
        scrollTop: number;
        readonly scrollWidth: number;
        readonly shadowRoot: ShadowRoot | null;
        slot: string;
        readonly tagName: string;
        attachShadow(shadowRootInitDict: ShadowRootInit): ShadowRoot;
        closest<K extends "object" | "font" | "track" | "center" | "progress" | "a" | "abbr" | "acronym" | "address" | "applet" | "area" | "article" | "aside" | "audio" | "b" | "base" | "basefont" | "bdo" | "big" | "blockquote" | "body" | "br" | "button" | "canvas" | "caption" | "cite" | "code" | "col" | "colgroup" | "data" | "datalist" | "dd" | "del" | "dfn" | "dir" | "div" | "dl" | "dt" | "em" | "embed" | "fieldset" | "figcaption" | "figure" | "footer" | "form" | "frame" | "frameset" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "head" | "header" | "hgroup" | "hr" | "html" | "i" | "iframe" | "img" | "input" | "ins" | "isindex" | "kbd" | "keygen" | "label" | "legend" | "li" | "link" | "listing" | "map" | "mark" | "marquee" | "menu" | "meta" | "meter" | "nav" | "nextid" | "nobr" | "noframes" | "noscript" | "ol" | "optgroup" | "option" | "output" | "p" | "param" | "picture" | "plaintext" | "pre" | "q" | "rt" | "ruby" | "s" | "samp" | "script" | "section" | "select" | "slot" | "small" | "source" | "span" | "strike" | "strong" | "style" | "sub" | "sup" | "table" | "tbody" | "td" | "template" | "textarea" | "tfoot" | "th" | "thead" | "time" | "title" | "tr" | "tt" | "u" | "ul" | "var" | "video" | "wbr" | "xmp">(selector: K): HTMLElementTagNameMap[K] | null;
        closest<K extends "symbol" | "clipPath" | "filter" | "marker" | "mask" | "circle" | "defs" | "desc" | "ellipse" | "feBlend" | "feColorMatrix" | "feComponentTransfer" | "feComposite" | "feConvolveMatrix" | "feDiffuseLighting" | "feDisplacementMap" | "feDistantLight" | "feFlood" | "feFuncA" | "feFuncB" | "feFuncG" | "feFuncR" | "feGaussianBlur" | "feImage" | "feMerge" | "feMergeNode" | "feMorphology" | "feOffset" | "fePointLight" | "feSpecularLighting" | "feSpotLight" | "feTile" | "feTurbulence" | "foreignObject" | "g" | "image" | "line" | "linearGradient" | "path" | "metadata" | "pattern" | "polygon" | "polyline" | "radialGradient" | "rect" | "svg" | "stop" | "switch" | "tspan" | "text" | "textPath" | "use" | "view">(selector: K): SVGElementTagNameMap[K] | null;
        closest(selector: string): Element | null;
        getAttribute(qualifiedName: string): string | null;
        getAttributeNS(namespaceURI: string, localName: string): string;
        getAttributeNode(name: string): Attr | null;
        getAttributeNodeNS(namespaceURI: string, localName: string): Attr | null;
        getBoundingClientRect(): ClientRect | DOMRect;
        getClientRects(): ClientRectList | DOMRectList;
        getElementsByClassName(classNames: string): NodeListOf<Element>;
        getElementsByTagName<K extends "object" | "font" | "track" | "center" | "progress" | "a" | "abbr" | "acronym" | "address" | "applet" | "area" | "article" | "aside" | "audio" | "b" | "base" | "basefont" | "bdo" | "big" | "blockquote" | "body" | "br" | "button" | "canvas" | "caption" | "cite" | "code" | "col" | "colgroup" | "data" | "datalist" | "dd" | "del" | "dfn" | "dir" | "div" | "dl" | "dt" | "em" | "embed" | "fieldset" | "figcaption" | "figure" | "footer" | "form" | "frame" | "frameset" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "head" | "header" | "hgroup" | "hr" | "html" | "i" | "iframe" | "img" | "input" | "ins" | "isindex" | "kbd" | "keygen" | "label" | "legend" | "li" | "link" | "listing" | "map" | "mark" | "marquee" | "menu" | "meta" | "meter" | "nav" | "nextid" | "nobr" | "noframes" | "noscript" | "ol" | "optgroup" | "option" | "output" | "p" | "param" | "picture" | "plaintext" | "pre" | "q" | "rt" | "ruby" | "s" | "samp" | "script" | "section" | "select" | "slot" | "small" | "source" | "span" | "strike" | "strong" | "style" | "sub" | "sup" | "table" | "tbody" | "td" | "template" | "textarea" | "tfoot" | "th" | "thead" | "time" | "title" | "tr" | "tt" | "u" | "ul" | "var" | "video" | "wbr" | "xmp">(name: K): NodeListOf<HTMLElementTagNameMap[K]>;
        getElementsByTagName<K extends "symbol" | "clipPath" | "filter" | "marker" | "mask" | "circle" | "defs" | "desc" | "ellipse" | "feBlend" | "feColorMatrix" | "feComponentTransfer" | "feComposite" | "feConvolveMatrix" | "feDiffuseLighting" | "feDisplacementMap" | "feDistantLight" | "feFlood" | "feFuncA" | "feFuncB" | "feFuncG" | "feFuncR" | "feGaussianBlur" | "feImage" | "feMerge" | "feMergeNode" | "feMorphology" | "feOffset" | "fePointLight" | "feSpecularLighting" | "feSpotLight" | "feTile" | "feTurbulence" | "foreignObject" | "g" | "image" | "line" | "linearGradient" | "path" | "metadata" | "pattern" | "polygon" | "polyline" | "radialGradient" | "rect" | "svg" | "stop" | "switch" | "tspan" | "text" | "textPath" | "use" | "view">(name: K): NodeListOf<SVGElementTagNameMap[K]>;
        getElementsByTagName(name: string): NodeListOf<Element>;
        getElementsByTagNameNS(namespaceURI: "http://www.w3.org/1999/xhtml", localName: string): HTMLCollectionOf<HTMLElement>;
        getElementsByTagNameNS(namespaceURI: "http://www.w3.org/2000/svg", localName: string): HTMLCollectionOf<SVGElement>;
        getElementsByTagNameNS(namespaceURI: string, localName: string): HTMLCollectionOf<Element>;
        hasAttribute(name: string): boolean;
        hasAttributeNS(namespaceURI: string, localName: string): boolean;
        hasAttributes(): boolean;
        hasPointerCapture(pointerId: number): boolean;
        insertAdjacentElement(position: InsertPosition, insertedElement: Element): Element | null;
        insertAdjacentHTML(where: InsertPosition, html: string): void;
        insertAdjacentText(where: InsertPosition, text: string): void;
        matches(selectors: string): boolean;
        msGetRegionContent(): any;
        msGetUntransformedBounds(): ClientRect;
        msMatchesSelector(selectors: string): boolean;
        msReleasePointerCapture(pointerId: number): void;
        msSetPointerCapture(pointerId: number): void;
        msZoomTo(args: MsZoomToOptions): void;
        releasePointerCapture(pointerId: number): void;
        removeAttribute(qualifiedName: string): void;
        removeAttributeNS(namespaceURI: string, localName: string): void;
        removeAttributeNode(oldAttr: Attr): Attr;
        requestFullscreen(): void;
        requestPointerLock(): void;
        scroll(options?: ScrollToOptions | undefined): void;
        scroll(x: number, y: number): void;
        scrollBy(options?: ScrollToOptions | undefined): void;
        scrollBy(x: number, y: number): void;
        scrollIntoView(arg?: boolean | ScrollIntoViewOptions | undefined): void;
        scrollTo(options?: ScrollToOptions | undefined): void;
        scrollTo(x: number, y: number): void;
        setAttribute(qualifiedName: string, value: string): void;
        setAttributeNS(namespaceURI: string, qualifiedName: string, value: string): void;
        setAttributeNode(newAttr: Attr): Attr;
        setAttributeNodeNS(newAttr: Attr): Attr;
        setPointerCapture(pointerId: number): void;
        webkitMatchesSelector(selectors: string): boolean;
        webkitRequestFullScreen(): void;
        webkitRequestFullscreen(): void;
        readonly baseURI: string | null;
        readonly childNodes: NodeListOf<Node & ChildNode>;
        readonly firstChild: Node | null;
        readonly isConnected: boolean;
        readonly lastChild: Node | null;
        readonly localName: string | null;
        readonly namespaceURI: string | null;
        readonly nextSibling: Node | null;
        readonly nodeName: string;
        readonly nodeType: number;
        nodeValue: string | null;
        readonly ownerDocument: Document;
        readonly parentElement: HTMLElement | null;
        readonly parentNode: Node | null;
        readonly previousSibling: Node | null;
        textContent: string | null;
        appendChild<T extends Node>(newChild: T): T;
        cloneNode(deep?: boolean | undefined): Node;
        compareDocumentPosition(other: Node): number;
        contains(child: Node): boolean;
        hasChildNodes(): boolean;
        insertBefore<T extends Node>(newChild: T, refChild: Node | null): T;
        isDefaultNamespace(namespaceURI: string | null): boolean;
        isEqualNode(arg: Node): boolean;
        isSameNode(other: Node): boolean;
        lookupNamespaceURI(prefix: string | null): string | null;
        lookupPrefix(namespaceURI: string | null): string | null;
        normalize(): void;
        removeChild<T extends Node>(oldChild: T): T;
        replaceChild<T extends Node>(newChild: Node, oldChild: T): T;
        readonly ATTRIBUTE_NODE: number;
        readonly CDATA_SECTION_NODE: number;
        readonly COMMENT_NODE: number;
        readonly DOCUMENT_FRAGMENT_NODE: number;
        readonly DOCUMENT_NODE: number;
        readonly DOCUMENT_POSITION_CONTAINED_BY: number;
        readonly DOCUMENT_POSITION_CONTAINS: number;
        readonly DOCUMENT_POSITION_DISCONNECTED: number;
        readonly DOCUMENT_POSITION_FOLLOWING: number;
        readonly DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: number;
        readonly DOCUMENT_POSITION_PRECEDING: number;
        readonly DOCUMENT_TYPE_NODE: number;
        readonly ELEMENT_NODE: number;
        readonly ENTITY_NODE: number;
        readonly ENTITY_REFERENCE_NODE: number;
        readonly NOTATION_NODE: number;
        readonly PROCESSING_INSTRUCTION_NODE: number;
        readonly TEXT_NODE: number;
        dispatchEvent(evt: Event): boolean;
        onanimationcancel: ((this: GlobalEventHandlers, ev: AnimationEvent) => any) | null;
        onanimationend: ((this: GlobalEventHandlers, ev: AnimationEvent) => any) | null;
        onanimationiteration: ((this: GlobalEventHandlers, ev: AnimationEvent) => any) | null;
        onanimationstart: ((this: GlobalEventHandlers, ev: AnimationEvent) => any) | null;
        ongotpointercapture: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
        onlostpointercapture: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
        onpointercancel: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
        onpointerdown: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
        onpointerenter: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
        onpointerleave: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
        onpointermove: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
        onpointerout: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
        onpointerover: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
        onpointerup: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
        ontouchcancel: ((this: GlobalEventHandlers, ev: TouchEvent) => any) | null;
        ontouchend: ((this: GlobalEventHandlers, ev: TouchEvent) => any) | null;
        ontouchmove: ((this: GlobalEventHandlers, ev: TouchEvent) => any) | null;
        ontouchstart: ((this: GlobalEventHandlers, ev: TouchEvent) => any) | null;
        ontransitioncancel: ((this: GlobalEventHandlers, ev: TransitionEvent) => any) | null;
        ontransitionend: ((this: GlobalEventHandlers, ev: TransitionEvent) => any) | null;
        ontransitionrun: ((this: GlobalEventHandlers, ev: TransitionEvent) => any) | null;
        ontransitionstart: ((this: GlobalEventHandlers, ev: TransitionEvent) => any) | null;
        onwheel: ((this: GlobalEventHandlers, ev: WheelEvent) => any) | null;
        readonly childElementCount: number;
        readonly firstElementChild: Element | null;
        readonly lastElementChild: Element | null;
        readonly nextElementSibling: Element | null;
        readonly previousElementSibling: Element | null;
        readonly children: HTMLCollection;
        querySelector<K extends "object" | "font" | "track" | "center" | "progress" | "a" | "abbr" | "acronym" | "address" | "applet" | "area" | "article" | "aside" | "audio" | "b" | "base" | "basefont" | "bdo" | "big" | "blockquote" | "body" | "br" | "button" | "canvas" | "caption" | "cite" | "code" | "col" | "colgroup" | "data" | "datalist" | "dd" | "del" | "dfn" | "dir" | "div" | "dl" | "dt" | "em" | "embed" | "fieldset" | "figcaption" | "figure" | "footer" | "form" | "frame" | "frameset" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "head" | "header" | "hgroup" | "hr" | "html" | "i" | "iframe" | "img" | "input" | "ins" | "isindex" | "kbd" | "keygen" | "label" | "legend" | "li" | "link" | "listing" | "map" | "mark" | "marquee" | "menu" | "meta" | "meter" | "nav" | "nextid" | "nobr" | "noframes" | "noscript" | "ol" | "optgroup" | "option" | "output" | "p" | "param" | "picture" | "plaintext" | "pre" | "q" | "rt" | "ruby" | "s" | "samp" | "script" | "section" | "select" | "slot" | "small" | "source" | "span" | "strike" | "strong" | "style" | "sub" | "sup" | "table" | "tbody" | "td" | "template" | "textarea" | "tfoot" | "th" | "thead" | "time" | "title" | "tr" | "tt" | "u" | "ul" | "var" | "video" | "wbr" | "xmp">(selectors: K): HTMLElementTagNameMap[K] | null;
        querySelector<K extends "symbol" | "clipPath" | "filter" | "marker" | "mask" | "circle" | "defs" | "desc" | "ellipse" | "feBlend" | "feColorMatrix" | "feComponentTransfer" | "feComposite" | "feConvolveMatrix" | "feDiffuseLighting" | "feDisplacementMap" | "feDistantLight" | "feFlood" | "feFuncA" | "feFuncB" | "feFuncG" | "feFuncR" | "feGaussianBlur" | "feImage" | "feMerge" | "feMergeNode" | "feMorphology" | "feOffset" | "fePointLight" | "feSpecularLighting" | "feSpotLight" | "feTile" | "feTurbulence" | "foreignObject" | "g" | "image" | "line" | "linearGradient" | "path" | "metadata" | "pattern" | "polygon" | "polyline" | "radialGradient" | "rect" | "svg" | "stop" | "switch" | "tspan" | "text" | "textPath" | "use" | "view">(selectors: K): SVGElementTagNameMap[K] | null;
        querySelector<E extends Element = Element>(selectors: string): E | null;
        querySelectorAll<K extends "object" | "font" | "track" | "center" | "progress" | "a" | "abbr" | "acronym" | "address" | "applet" | "area" | "article" | "aside" | "audio" | "b" | "base" | "basefont" | "bdo" | "big" | "blockquote" | "body" | "br" | "button" | "canvas" | "caption" | "cite" | "code" | "col" | "colgroup" | "data" | "datalist" | "dd" | "del" | "dfn" | "dir" | "div" | "dl" | "dt" | "em" | "embed" | "fieldset" | "figcaption" | "figure" | "footer" | "form" | "frame" | "frameset" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "head" | "header" | "hgroup" | "hr" | "html" | "i" | "iframe" | "img" | "input" | "ins" | "isindex" | "kbd" | "keygen" | "label" | "legend" | "li" | "link" | "listing" | "map" | "mark" | "marquee" | "menu" | "meta" | "meter" | "nav" | "nextid" | "nobr" | "noframes" | "noscript" | "ol" | "optgroup" | "option" | "output" | "p" | "param" | "picture" | "plaintext" | "pre" | "q" | "rt" | "ruby" | "s" | "samp" | "script" | "section" | "select" | "slot" | "small" | "source" | "span" | "strike" | "strong" | "style" | "sub" | "sup" | "table" | "tbody" | "td" | "template" | "textarea" | "tfoot" | "th" | "thead" | "time" | "title" | "tr" | "tt" | "u" | "ul" | "var" | "video" | "wbr" | "xmp">(selectors: K): NodeListOf<HTMLElementTagNameMap[K]>;
        querySelectorAll<K extends "symbol" | "clipPath" | "filter" | "marker" | "mask" | "circle" | "defs" | "desc" | "ellipse" | "feBlend" | "feColorMatrix" | "feComponentTransfer" | "feComposite" | "feConvolveMatrix" | "feDiffuseLighting" | "feDisplacementMap" | "feDistantLight" | "feFlood" | "feFuncA" | "feFuncB" | "feFuncG" | "feFuncR" | "feGaussianBlur" | "feImage" | "feMerge" | "feMergeNode" | "feMorphology" | "feOffset" | "fePointLight" | "feSpecularLighting" | "feSpotLight" | "feTile" | "feTurbulence" | "foreignObject" | "g" | "image" | "line" | "linearGradient" | "path" | "metadata" | "pattern" | "polygon" | "polyline" | "radialGradient" | "rect" | "svg" | "stop" | "switch" | "tspan" | "text" | "textPath" | "use" | "view">(selectors: K): NodeListOf<SVGElementTagNameMap[K]>;
        querySelectorAll<E extends Element = Element>(selectors: string): NodeListOf<E>;
        remove(): void;
        animate(keyframes: PropertyIndexedKeyframes | Keyframe[] | null, options?: number | KeyframeAnimationOptions | undefined): Animation;
        getAnimations(): Animation[];
        readonly style: CSSStyleDeclaration;
    };
} & T;
export {};
